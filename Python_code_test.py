################################################################

################################################################

################################################################

################################################################

################################################################
#with 一个实例化对象，会先去执行__enter__,实例化对象结束后会执行__exit__
	# with obj as f:
	# 	'代码块'
	# 1. with obj ----> 触发obj.__enter__,拿到返回值
	# 2. as f ----> f=返回值
	# 3. with obj as f:   相当于是   f=obj.__enter__()
	# 4. 执行代码块	
	# 	1, 没有异常的情况下，整个代码块运行完毕后去触发__exit__,它的三个参数都为NONE
	# 	2, 有异常的情况下，从异常出现的位置直接触发__exit__,
	# 		a:  如果__exit__的返回值为True，代表吞掉了异常   -->c:
	# 		b:  如果__exit__的返回值不为True，代表吐出了异常 -->中止了
	# 		c:  exit的运行毕就代表了整个with语句的执行完毕
# class Foo():	
# 	def __init__(self,name):
# 		self.name=name
# 	def __enter__(self):
# 		print("执行了enter")
# 		return self
# 	def __exit__(self, exc_type, exc_val, exc_tb):
# 		print("执行exit")
# 		print(exc_type)
# 		print(exc_val)
# 		print(exc_tb)
# 		return True   
# 		#此处会吃了错误异常 会继续执行with 外面后面的程序print("===============>0000n000000000")
# 		#如果没有这个return True 那程序会中止在with的错误之处，后面的程序全部不会执行

# with Foo('a.txt') as f:
# 	print(f)
# 	print(asdfafasdasdasd)
# 	print(f.name)

# print("===============>0000n000000000")
################################################################